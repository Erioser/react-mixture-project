{"version":3,"sources":["store/connect.js","store/modules/lottery/actions.js","pages/Lottery/LotteryQuery/particles/LotteryQueryForm.js","pages/Lottery/LotteryQuery/particles/LotteryQueryInfo.js","pages/Lottery/LotteryQuery/index.js"],"names":["reducers","actions","lottery","getLotteryTypes","dispatch","apiGetLotteryTypes","then","data","error_code","type","payload","lotteryTypes","result","mkMapStateToProps","param","state","forEach","reducer","resolveParamType","indexOf","stateType","r","stateResult","_state","mkMapDispatchToProps","concat","bindActionCreators","Object","prototype","toString","call","slice","customConnect","reducerParam","connect","Option","Select","LotteryQueryForm","handleSubmit","e","preventDefault","_this","props","form","validateFieldsAndScroll","err","values","getLotteryResult","loading","apiGetLotteryBonus","_ref","reason","this","react_default","a","createElement","es_select","map","item","key","lottery_id","value","lottery_name","length","lottery_action","getFieldDecorator","className","es_form","onSubmit","Item","label","rules","required","message","input","typography","Paragraph","initialValue","renderSelectItem","es_button","htmlType","Component","WrappedRegistrationForm","Form","create","name","Typography","Text","LotteryQueryInfo","classCallCheck","possibleConstructorReturn","getPrototypeOf","columns","title","dataIndex","lottery_no","lottery_date","lottery_res","real_lottery_res","in_money","buy_red_ball_num","buy_blue_ball_num","hit_red_ball_num","hit_blue_ball_num","prize_msg","lottery_prize","renderBasicInfo","table","pagination","dataSource","LotterQueryPage","lotteryResult","isFirst","bind","assertThisInitialized","_ref$result","params","setState","_this$state","icon","theme","spin","size","console","log","particles_LotteryQueryInfo","es_alert","description","row","justify","col","span","Title","level","particles_LotteryQueryForm","renderContent"],"mappings":"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","file":"static/js/8.cf12f52c.chunk.js","sourcesContent":["import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport lotteryActions from '@/store/modules/lottery/actions'\n\nconst reducers = ['lottery']\nconst actions = {\n  'lottery': lotteryActions\n}\n\nconst customConnect = (reducerParam) => {\n  let type = resolveParamType(reducerParam)\n  if (type === 'Undefined' || type === 'Null') {\n    return connect(\n      mkMapStateToProps(),\n      mkMapDispatchToProps()\n    )\n  }\n  let param = null\n  \n  if (type === 'String') {\n    param = [ reducerParam ]\n  } else {\n    param = reducerParam\n  }\n  return connect(\n    mkMapStateToProps(param),\n    mkMapDispatchToProps(param)\n  )\n}\n\nfunction mkMapStateToProps (param) {\n  if (!param) {\n    let result = state => state\n    return result\n  } else {\n    let resultFunc = state => {\n      let result = {}\n      param.forEach(reducer => {   \n        let type = resolveParamType(reducer)\n        if (type === 'String' && reducers.indexOf(reducer) > -1) {\n          result[reducer] = state[reducer]\n        }\n        if (type === 'Object' && reducers.indexOf(reducer.reducer) > -1) {\n          let stateType = resolveParamType(reducer.state)\n          if (stateType === 'Undefined' || stateType === 'Null') {\n            result[reducer.reducer] = state[reducer.reducer]\n          }\n          if (stateType === 'String') {\n            let r = {}\n            r[reducer.state] = state[reducer.reducer][reducer.state]\n            result[reducer.reducer] = r\n          }\n          if (stateType === 'Array') {\n            let stateResult = {}\n            reducer.state.forEach(_state => {\n              stateResult[_state] = state[reducer.reducer][_state]\n            })\n            result[reducer.reducer] = stateResult\n          }  \n        }\n      })\n      return result\n    }\n    return resultFunc\n  }\n}\n\nfunction mkMapDispatchToProps (param) {\n  if (!param) {\n    let resultFunc = dispatch => {\n      let result = {}\n      reducers.forEach(reducer => {\n        result[`${reducer}_action`] = bindActionCreators(actions[reducer], dispatch)\n      })\n      return result\n    }\n    return resultFunc\n  } else {\n    let resultFunc = dispatch => {\n      let result = {}\n      param.forEach(reducer => {\n        let type = resolveParamType(reducer)\n        if (type === 'String' && actions[reducer]) {\n          result[`${reducer}_action`] = bindActionCreators(actions[reducer], dispatch)\n        }\n        if (type === 'Object' && actions[reducer.reducer]) {\n          result[`${reducer.reducer}_action`] = bindActionCreators(actions[reducer.reducer], dispatch)\n        }\n      })\n      return result\n    }\n    return resultFunc\n  }\n}\n\nfunction resolveParamType (param) {\n  return Object.prototype.toString.call(param).slice(8, -1)\n}\n\n// customConnect('lottery')(A)\n\n// customConnect('lottery')(A)\n\n// customConnect(['lottery', 'global'])(A)\n\n// customConnect([{\n//   reduer: 'lottery',\n//   state: 'types'\n// }, 'global'])(A)\n\n// customConnect([{\n//   reduer: 'lottery',\n//   state: ['types', 'detail']\n// }, 'global'])(A)\n\nexport default customConnect","\nimport {\n  apiGetLotteryTypes\n} from '@/api'\n\nexport default {\n  getLotteryTypes () {\n    return function (dispatch) {\n      apiGetLotteryTypes().then(data => {\n        if (data.error_code !== 0) return false\n        dispatch({\n          type: 'SET_LOTTERY_TYPES',\n          payload: {\n            lotteryTypes: data.result\n          }\n        })        \n      }) \n    }\n  }\n}","import React, { Component } from 'react'\nimport connect from '@/store/connect'\nimport { apiGetLotteryBonus } from '@/api'\nimport {\n  Form,\n  Input,\n  Select,\n  Button,\n  Typography\n} from 'antd'\n\nconst { Option } = Select\n\nclass LotteryQueryForm extends Component {\n  handleSubmit = e => {\n    e.preventDefault()\n    this.props.form.validateFieldsAndScroll((err, values) => {\n      if (!err) {\n        this.props.getLotteryResult({ loading: true })\n        apiGetLotteryBonus(values).then(({data}) => {\n          if (data.error_code !== 0) {\n            this.props.getLotteryResult({ result: data.reason, loading: false })\n            return false\n          }\n          this.props.getLotteryResult({ result: data.result, loading: false })\n        })\n      }\n    })\n  }\n\n  renderSelectItem () {\n    let { lotteryTypes } = this.props.lottery\n    return (\n      <Select>   \n        {\n          lotteryTypes.map(item => (\n            <Option key={item.lottery_id} value={item.lottery_id}>{item.lottery_name}</Option>\n          ))\n        }\n      </Select>\n    )\n  }\n\n  componentDidMount () {\n    if (!this.props.lottery.lotteryTypes.length) {\n      this.props.lottery_action.getLotteryTypes()\n    }\n  }\n\n  render () {\n    const { getFieldDecorator } = this.props.form\n    const { lotteryTypes } = this.props.lottery\n\n    return (\n      <div className=\"lottery-query-form\">\n        <Form onSubmit={this.handleSubmit}>\n          <Form.Item label=\"彩票号码\">\n            {getFieldDecorator('lottery_res', {\n              rules: [\n                { required: true, message: '必须输入彩票号码' }\n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Typography.Paragraph>\n            提示：号码之间用英文逗号隔开，红色球和蓝色求之间用@连接，例如：01,11,02,09,14,22,25@05,03\n          </Typography.Paragraph>\n          {\n            lotteryTypes.length ? (\n              <Form.Item label=\"彩票类型\">\n                {getFieldDecorator('lottery_id', {\n                  rules: [\n                    { required: true, message: '必须选择彩票类型' }\n                  ],\n                  initialValue: lotteryTypes[0].lottery_id\n                })( this.renderSelectItem() )}\n              </Form.Item>\n            ) : ''\n          }\n\n          <Form.Item label=\"彩票期号\">\n            {getFieldDecorator('lottery_no', {\n              rules: [\n                \n              ]\n            })(<Input />)}\n          </Form.Item>\n          <Typography.Paragraph>\n            提示：不填写则为最近一期\n          </Typography.Paragraph>\n\n          <Form.Item >\n            <Button type=\"primary\" htmlType=\"submit\">\n              查询\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  }\n}\nconst WrappedRegistrationForm = Form.create({ name: 'query' })(\n  connect('lottery')(LotteryQueryForm)\n)\nexport default WrappedRegistrationForm","import React, { Component } from 'react'\nimport { Table, Typography } from 'antd'\n\nconst { Paragraph, Text } = Typography\n\nclass LotteryQueryInfo extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      columns: [\n        { title: '中奖奖项', dataIndex: 'prize_name', key: 'prize_name' },\n        { title: '中奖注数', dataIndex: 'prize_num', key: 'prize_num' },  \n        { title: '中奖条件', dataIndex: 'prize_require', key: 'prize_require' },\n        { title: '单注奖金', dataIndex: 'prize_money', key: 'prize_money' }\n      ]\n    }\n  }\n  renderBasicInfo () {\n    let data = this.props.data\n    return (\n      <Typography>\n        <Paragraph>开奖期号: <Text>{data.lottery_no}</Text></Paragraph>\n        <Paragraph>彩票名称: <Text>{data.lottery_name}</Text></Paragraph>\n        <Paragraph>开奖日期: <Text>{data.lottery_date}</Text></Paragraph>\n        <Paragraph>投注号码: <Text>{data.lottery_res}</Text></Paragraph>\n        <Paragraph>开奖号码: <Text>{data.real_lottery_res}</Text></Paragraph>\n        <Paragraph>投注金额: <Text>{data.in_money}</Text></Paragraph>\n\n        <Paragraph>投注红球数目: <Text>{data.buy_red_ball_num}</Text></Paragraph>\n        <Paragraph>投注蓝球数目: <Text>{data.buy_blue_ball_num}</Text></Paragraph>\n        <Paragraph>命中红球数目: <Text>{data.hit_red_ball_num}</Text></Paragraph>\n        <Paragraph>命中蓝球数目: <Text>{data.hit_blue_ball_num}</Text></Paragraph>\n\n        <Paragraph>中奖消息: <Text>{data.prize_msg}</Text></Paragraph>\n      </Typography>\n    )\n  }\n  render () {\n    let { columns } = this.state\n    let { lottery_prize } = this.props.data \n    return (\n      <div className=\"lottery-query__table\">\n        { this.renderBasicInfo() }\n        {\n          lottery_prize ? <Table pagination={false} dataSource={lottery_prize} columns={columns} /> : ''\n        } \n      </div>\n    )\n  }\n}\nexport default LotteryQueryInfo\n\n// for(var i = 0; i < 5; i++) {\n//   for(var j = 0; j < 5; j++) {\n//     console.log(i + j)\n//   }\n// }","import React, { Component } from 'react'\nimport { Row, Col, Typography, Result, Icon, Spin, Alert } from 'antd'\nimport LotteryQueryForm from './particles/LotteryQueryForm'\nimport LotteryQueryInfo from './particles/LotteryQueryInfo'\nimport './index.scss'\nclass LotterQueryPage extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      lotteryResult: null,\n      isFirst: true,\n      loading: false\n    }\n    this.getLotteryResult = this.getLotteryResult.bind(this)\n  }\n  getLotteryResult ({ result = null, loading }) {\n    let params = { loading }\n    if (result) params.lotteryResult = result\n    if (this.state.isFirst) params.isFirst = false\n    this.setState(params)\n  }\n\n  renderContent () {\n    const { lotteryResult, loading, isFirst } = this.state\n    if (isFirst) return (\n      <Result\n        icon={<Icon type=\"smile\" theme=\"twoTone\" />}\n        title=\"快点开始查询吧～\"\n      />\n    )\n\n    if (loading) return  (\n      <div className=\"loading__congtainer\">\n        <Spin size=\"large\" />\n      </div>\n    )\n    console.log(lotteryResult, 111)\n    if (lotteryResult && typeof lotteryResult !== 'string') {\n      return <LotteryQueryInfo data={this.state.lotteryResult}/>\n    }\n    if (lotteryResult && typeof lotteryResult === 'string') {\n      \n      return (<Alert\n        message=\"错误信息\"\n        description={lotteryResult}\n        type=\"error\"\n      />)\n    }\n    return (<Alert\n      description=\"抱歉，没有查到对应的数据\"\n      type=\"info\"\n    />)\n  }\n\n  render () {\n    \n    return (\n      <div className=\"page-container lottery-query-page\">\n        <Row type=\"flex\" justify=\"space-between\">\n          <Col span={6}>\n            <Typography.Title level={4}>请填写彩票信息</Typography.Title>\n            <LotteryQueryForm getLotteryResult = {this.getLotteryResult}/>\n          </Col>\n          <Col span={16}>\n            <Typography.Title level={4}>查询结果</Typography.Title>\n            <div className=\"lottery-query__content\">\n              { this.renderContent() }\n            </div>\n          </Col>\n        </Row>\n      </div>\n    )\n  }\n}\n\nexport default LotterQueryPage"],"sourceRoot":""}