{"version":3,"sources":["pages/TodoList/particles/TodoListItem.js","pages/TodoList/particles/TodoListContent.js","pages/TodoList/particles/TodoListDes.js","pages/TodoList/particles/TodoListCAE.js","pages/TodoList/index.js"],"names":["TodoListItem","memo","props","_useTodolistStoreCont","useTodolistStoreContext","_useTodolistStoreCont2","Object","slicedToArray","actions","_props$info","info","title","description","finished","id","color","react_default","a","createElement","card","className","concat","extra","icon","type","style","fontSize","onClick","finishTodo","key","editAction","theme","deleteTodo","typography","Paragraph","ellipsis","rows","TodoListContent","items","_useState","useState","_useState2","page","setPage","pageSize","row","gutter","react","fallback","spin","length","slice","map","item","col","span","particles_TodoListItem","empty","pagination","total","showTotal","range","current","onChange","TodoListDes","detail","TextArea","Input","TodoListForm","Form","create","name","toggleVisible","form","getFieldDecorator","useEffect","editItem","_props$editItem","setFieldsValue","resetFields","es_form","layout","Item","label","rules","required","message","input","autosize","minRows","es_button","validateFields","err","values","updateTodoItem","_objectSpread","createTodoItem","TodoListCAE","visible","setTitle","useRef","drawer","width","placement","closable","onClose","ref","TodoListPage","setVisible","_useState3","_useState4","setEditItem","getInitialItems","Title","level","particles_TodoListDes","shape","size","particles_TodoListCAE","particles_TodoListContent"],"mappings":"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","file":"static/js/12.ba0e9dc3.chunk.js","sourcesContent":["import React, { memo } from 'react'\nimport { Card, Icon, Typography } from 'antd'\nimport { useTodolistStoreContext } from '@/hooks/todolist'\nconst TodoListItem = memo((props) => {\n  const [state, actions] = useTodolistStoreContext()\n\n  let { title, description, finished, id } = props.info\n  let color = finished ? '#1890ff' : '#ccc'\n\n  function finishAction () {\n    actions.finishTodo({ id })\n  }\n  function deleteAction () {\n    actions.deleteTodo({ id })\n  }\n  function editAction () {\n    props.editAction(props.info)\n  }\n  \n  return (\n    <Card\n      className={`todolist__item ${ finished ? 'finished' : '' }`}\n      title={ title }\n      extra={<Icon type=\"check-circle\" style={{ fontSize: '24px', color }}/>}\n      actions={[\n        <Icon onClick={finishAction} type=\"check\" key=\"check\" />,\n        <Icon onClick={editAction} type=\"edit\" key=\"edit\" theme=\"filled\" />,\n        <Icon onClick={deleteAction} type=\"delete\" key=\"delete\" theme=\"filled\" />,\n      ]}\n    >\n      <Typography.Paragraph ellipsis={{ rows: 5 }}>{ description }</Typography.Paragraph>\n    </Card>\n  )\n\n})\n\nexport default TodoListItem","import React, { useState, Suspense, memo } from 'react'\nimport { Row, Col, Pagination, Spin, Empty } from 'antd'\nimport { useTodolistStoreContext } from '@/hooks/todolist'\n\nimport TodoListItem from './TodoListItem'\n\nconst TodoListContent = memo((props) => {\n  let [items] = useTodolistStoreContext('items')\n  let [page, setPage] = useState(1)\n  let pageSize = 8\n\n  function renderItems () {\n    if (!items.length) return <Empty />\n    \n    let renderItems = items.slice(\n      (page - 1) * pageSize,\n      page * pageSize\n    )\n    return renderItems.map((item) => (\n      <Col className=\"todolist__item-col\" key={item.id} span={24 / (pageSize / 2)}>\n        <TodoListItem editAction={props.editAction} info={item}/>\n      </Col> \n    ))\n  }\n\n  return (\n    <div className=\"todolist-content\">\n      <Row gutter={16} className=\"todolist-content__container\">\n        <Suspense fallback={<Spin/>}>{ renderItems() }</Suspense>\n      </Row>\n      <Pagination\n        total={items.length}\n        showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n        pageSize={pageSize}\n        current={page}\n        onChange={(page) => setPage(page)}\n      />\n    </div>\n  )\n})\n\nexport default TodoListContent","import React, { memo } from 'react'\nimport { Typography } from 'antd'\n\nimport { useTodolistStoreContext } from '@/hooks/todolist'\n\nconst TodoListDes = memo(() => {\n  let [detail] = useTodolistStoreContext('todoDetail')\n  return (\n    <Typography.Paragraph>\n      { detail.description }\n    </Typography.Paragraph>\n  )\n})\n\nexport default TodoListDes","import React, { useEffect, useState, useRef } from 'react'\nimport { Button, Drawer, Form, Input } from 'antd';\nimport { useTodolistStoreContext } from '@/hooks/todolist'\n\nconst { TextArea } = Input\n\nconst TodoListFormUI = (props) => {\n  const [state, actions] = useTodolistStoreContext()\n\n  const { toggleVisible, form } = props\n  const { getFieldDecorator } = form\n\n  function handleCancel () {\n    toggleVisible()\n    form.resetFields()\n  }\n  function handleOk () {\n    form.validateFields((err, values) => {\n      if (!err) {\n        if (!props.editItem) {\n          actions.createTodoItem({ item: values })\n        } else {\n          actions.updateTodoItem({ item: { ...values, id: props.editItem.id } })\n        }\n        \n        toggleVisible()\n        form.resetFields()\n      }\n    })\n  }\n\n  useEffect(() => {\n    if (props.editItem) {\n      let { title, description } = props.editItem\n      form.setFieldsValue({ title, description })\n    } else {\n      form.resetFields()\n    }\n  }, [props.editItem])\n\n  return (\n    <Form layout=\"vertical\">\n      <Form.Item label=\"Title\">\n        {getFieldDecorator('title', {\n          rules: [{ required: true, message: '事项标题不能为空！' }],\n        })(<Input />)}\n      </Form.Item>\n      <Form.Item label=\"Description\">\n        {getFieldDecorator('description', {\n          rules: [{ required: true, message: '事项内容不能为空！' }],\n        })(<TextArea autosize={{ minRows: 15 }} type=\"textarea\" />)}\n      </Form.Item>\n      <Form.Item >\n        <Button onClick={handleOk} type=\"primary\" >\n          保存\n        </Button>\n        <Button type=\"default\" onClick={handleCancel}>\n          取消\n        </Button>\n      </Form.Item>\n    </Form>\n  )\n}\n\nconst TodoListForm = Form.create({ name: 'todolist-form' })(TodoListFormUI)\n\nconst TodoListCAE = (props) => {\n  const { visible, toggleVisible } = props\n  let [title, setTitle] = useState('')\n  const form = useRef(null)\n\n  useEffect(() => {\n    setTitle(props.editItem ? '编辑待办事项' : '新增一条待办事项')\n    // if (form.current) {\n    //   if (props.editItem) {\n    //     let { title, description } = props.editItem\n    //     form.current.setFieldsValue({ title, description })\n    //   } else {\n    //     form.current.resetFields()\n    //   }\n    // }  \n  })\n\n  return (\n    <Drawer\n      width=\"500\"\n      title={title}\n      placement=\"right\"\n      closable={false}\n      onClose={toggleVisible}\n      visible={visible}\n    >\n      <TodoListForm editItem={props.editItem}  ref={form} toggleVisible = {toggleVisible}/>\n    </Drawer>\n  )\n  \n}\n\n\n\nexport default TodoListCAE","import React, { useEffect, useState } from 'react'\nimport './index.scss'\nimport { Typography, Button } from 'antd'\nimport { useTodolistStoreContext } from '@/hooks/todolist'\n\nimport TodoListContent from './particles/TodoListContent'\nimport TodoListDes from './particles/TodoListDes'\nimport TodoListCAE from './particles/TodoListCAE'\n\nconst TodoListPage = (props) => {\n  const [items, actions] = useTodolistStoreContext('items')\n  let [visible, setVisible] = useState(false)\n  let [editItem, setEditItem] = useState(null)\n  \n  useEffect(() => {\n    if (!items.length) actions.getInitialItems()\n  })\n\n  function toggleVisible () {\n    setVisible((visible) => !visible)\n    setEditItem(null)\n  }\n  function editAction (item) {\n    setVisible((visible) => !visible)\n    setEditItem(item)\n  }\n\n  return (\n    <div className=\"page-container todolist-page\">\n      <Typography>\n        <Typography.Title level = {3}>待办事项</Typography.Title>\n        <TodoListDes/>\n        <Button onClick={toggleVisible} className=\"create-btn\" type=\"primary\" shape=\"circle\" icon=\"plus\" size=\"large\" />\n      </Typography>\n      <TodoListCAE editItem={editItem} visible={visible} toggleVisible={toggleVisible}/>\n      <TodoListContent editAction={editAction} toggleVisible={toggleVisible}/>\n    </div>\n  )\n  \n}\n\nexport default TodoListPage"],"sourceRoot":""}